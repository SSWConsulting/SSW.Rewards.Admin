@page "/Prizedraw"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@attribute [Authorize]

@inject IAchievementClient AchievementClient
@inject ILeaderboardClient LeaderboardClient
@inject IRewardClient RewardClient
@inject ISnackbar SnackBar

<MudText Typo="Typo.h2">Prize Draw</MudText>

@if (_loading)
{
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true"/>
}
else
{
    <MudGrid Spacing="2">
        <MudItem>
            <MudAutocomplete
                T="AchievementDto"
                @bind-Value="@_selectedAchievement"
                Variant="Variant.Filled"
                Label="Required Achievement"
                AnchorOrigin="Origin.BottomCenter"
                SearchFuncWithCancel="@SearchAchivements"
                ShowProgressIndicator="true"
                ToStringFunc="@GetAchievementName"
            />
        </MudItem>

        <MudItem>
            <MudSelect
                Style="width: 250px;"
                T="LeaderboardFilter"
                @bind-Value="@_filter"
                Label="Players with Points Since"
                Variant="Variant.Filled"
                AnchorOrigin="Origin.BottomCenter">
                @foreach (var when in Enum.GetValues<LeaderboardFilter>())
                {
                    <MudSelectItem T="LeaderboardFilter" Value="@when">@when.ToString()</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem>
            <MudCheckBox T="bool"
                         Checked="_filterStaff"
                         Label="Filter staff"
                         CheckedChanged="(e) => _filterStaff = (bool)e!"/>
        </MudItem>
        <MudItem>
            <MudButton
                OnClick="@(async () => await LoadEligiblePlayers())"
                Variant="Variant.Filled"
                StartIcon="@Icons.Material.Filled.Search"
                Color="Color.Primary">
                Get eligible winners
            </MudButton>
        </MudItem>
    </MudGrid>
    
    <MudDivider DividerType="DividerType.Middle" Class="my-6"/>
    
    <MudGrid Justify="Justify.Center">
        <MudItem>
            <MudText Align="Align.Left">Eligible Players: @(_players?.Count ?? 0)</MudText>
        </MudItem>
    </MudGrid>
    
    <MudDivider DividerType="DividerType.Middle" Class="my-6"/>
    
    <MudGrid Spacing="2">
        <MudItem>
            <MudChipSet MultiSelection="false">
                @if (_players != null)
                {
                    @foreach (var player in _players.Select((p, index) => new { p, index }))
                    {
                        <MudChip
                            Size="@(IsWinner(player.p) ? Size.Large : Size.Small)"
                            Variant="@(IsWinner(player.p) ? Variant.Filled : Variant.Text)"
                            Icon="@(IsWinner(player.p) ? Icons.Material.Filled.Celebration : null)"
                            Color="@_colors[player.index % _colors.Length]">@(player.p.Name + (_balanceRequired ? $" ({player.p.Balance})" : string.Empty))</MudChip>
                    }   
                }
            </MudChipSet>
        </MudItem>
    </MudGrid>
    
    <MudDivider DividerType="DividerType.Middle" Class="my-12"/>
    
    @if (_isDrawingPrize || _prizeWinner != null)
    {
        <MudGrid Justify="Justify.Center">
            <MudItem>
                @if (_isDrawingPrize)
                {
                    <MudText Align="Align.Center">
                        Shuffling things around...
                    </MudText>
                    <MudText Align="Align.Center">
                        <MudProgressCircular Color="Color.Success" Indeterminate="true"/>
                    </MudText>
                }
                else if(_prizeWinner != null)
                {
                    <MudText Align="Align.Center">The Winner is:</MudText>
                    <MudText Align="Align.Center" Typo="Typo.h3">
                        <b>@(_prizeWinner.Name)</b>
                    </MudText>    
                }
            </MudItem>
        </MudGrid>    
    }
    
    @if (_prizeWinner != null && !_isDrawingPrize)
    {
        <MudGrid Spacing="2" Justify="Justify.Center">
            <MudItem>
                <MudButton
                    OnClick="@(async e => await ClaimPrizeForWinner(_prizeWinner))"
                    Variant="Variant.Filled"
                    StartIcon="@Icons.Material.Filled.Celebration"
                    Color="Color.Info">
                    Claim Prize
                </MudButton>
            </MudItem>
        </MudGrid>
    }
    
    @if (_players is {Count: > 0 } && !_isDrawingPrize)
    {
        <MudDivider DividerType="DividerType.Middle" Class="my-6"/>
        
        <MudGrid Spacing="2" Justify="Justify.Center">
            <MudItem>
                <MudButton
                    OnClick="DrawPrizeWinner"
                    Variant="Variant.Filled"
                    StartIcon="@Icons.Material.Filled.Celebration"
                    Color="Color.Primary"
                    Style="width: 400px; height: 60px;">
                    Draw prize winner!
                </MudButton>
            </MudItem>
        </MudGrid>
    }
}

@code {
    private readonly Color[] _colors = { Color.Primary, Color.Secondary, Color.Tertiary, Color.Info, Color.Warning, Color.Success, Color.Error };

    private static int PrizeDrawSuspenseDelay => 2500;
    
    private bool _loading = false;
    private bool _isDrawingPrize = false;
    
    private List<EligibleUserDto>? _players = new();
    private IEnumerable<RewardViewModel>? _rewards = Enumerable.Empty<RewardViewModel>();
    private List<AchievementDto>? _achievements = new();
    RewardViewModel? _selectedReward;
    AchievementDto? _selectedAchievement;
    string? _selectedRewardCode;
    private LeaderboardFilter _filter = LeaderboardFilter.Today;
    private bool _balanceRequired;
    private bool _filterStaff = true;
    private EligibleUserDto? _prizeWinner;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async Task<IEnumerable<AchievementDto>> SearchAchivements(string value, CancellationToken cancellationToken)
    {
        var achievements = await AchievementClient.SearchAsync(value, cancellationToken);

        return achievements.Achievements;
    }

    private async Task LoadEligiblePlayers()
    {
        try
        {
            _loading = true;
            Reset();
            var eligibleUsersVm = await LeaderboardClient.GetEligibleUsersAsync(_selectedAchievement?.Id, _filter, _filterStaff, CancellationToken.None);
            
            _players = eligibleUsersVm?.EligibleUsers?.ToList() ?? new List<EligibleUserDto>();
            _loading = false;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
    
    private async Task DrawPrizeWinner()
    {
        _isDrawingPrize = true;
        await InvokeAsync(StateHasChanged);
        await Task.Delay(PrizeDrawSuspenseDelay);
        Random rand = new();
        _prizeWinner = _players?.ElementAt(rand.Next(_players.Count()));
        _isDrawingPrize = false;
    }

    private bool IsWinner(EligibleUserDto? player) 
    {
        if (player == null || _prizeWinner == null)
        {
            return false;
        }
        return player.UserId == _prizeWinner.UserId;
    }

    private void Reset()
    {
        _prizeWinner = null;
        _selectedRewardCode = null;
    }

    private async Task ClaimPrizeForWinner(EligibleUserDto winner)
    {
        var result = await RewardClient.ClaimForUserAsync(new ClaimRewardForUserCommand
        {
            Code = _selectedRewardCode,
            UserId = winner.UserId ?? 0
        });

        if (result.Status == RewardStatus.Claimed)
        {
            SnackBar.Add($"Reward claimed", Severity.Success);
        }
        else
        {
            SnackBar.Add($"Could not claim reward!\n\n{result.Status}", Severity.Error);
        }
    }

    private string GetAchievementName(AchievementDto? achievement)
    {
        return achievement?.Name ?? string.Empty;
    }

}