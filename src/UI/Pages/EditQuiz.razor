@page "/edit-quiz/{id:int}"

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@using SSW.Rewards.Admin.UI.Components
@using SSW.Rewards.Admin.UI.Components.Dialogs.Quizzes
@using SSW.Rewards.Admin.UI.Models.Interfaces
@using System.ComponentModel.DataAnnotations

@attribute [Authorize]
@inject IQuizzesClient _client

@inject NavigationManager NavManager

<MudText Typo="Typo.h2">Edit quiz <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@((e) => ArchiveQuiz())">Delete quiz</MudButton></MudText>
<MudGrid>
    <MudItem lg="12">
        @if (HasQuiz)
        {
            <QuizDetails Model="_model" OnSaveClicked="DoThing"></QuizDetails>
        }
    </MudItem>
</MudGrid>


@code {

    [Parameter]
    public int id { get; set; }

    private AdminQuizDetailsDto _model = new();
    private bool HasQuiz = false;
    private async Task DoThing(bool b)
    {
        await SaveQuiz();
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetQuizDetails();
    }
    private async Task GetQuizDetails()
    {
        _model = await _client.GetQuizDetailsForEditAsync(id);
        HasQuiz = true;
    }
    private async Task SaveQuiz()
    {
        try
        {
            int quizId = await _client.UpdateQuizAsync(_model);
            //redirect to quizzes page
            NavManager.NavigateTo("/quizzes");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception)
        {
            throw;
        }
    }
    private async Task ArchiveQuiz()
    {
        _model.IsArchived = true;
        await SaveQuiz();
        //redirect to quizzes page
        NavManager.NavigateTo("/quizzes");
    }

}