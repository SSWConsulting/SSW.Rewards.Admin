@page "/leaderboard"

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@using SSW.Rewards.Admin.UI.Components

@attribute [Authorize]

@inject ILeaderboardClient _client

<MudText Typo="Typo.h2">Leaderboard</MudText>
<MudText Typo="Typo.body1">All users ranked by total points</MudText>

<Table TItem="LeaderboardUserDto"
       Items="@(_model.Where(s => s.Name.Contains(_searchString, StringComparison.InvariantCultureIgnoreCase)))"
       TableTitle="Leaderboard"
       IsLoading="@_loading">
    <ToolbarContent>
        <MudTextField @bind-Value="_searchString"
                      Placeholder="Search the leaderboard by name"
                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                      Class="mt-0"/>
    </ToolbarContent>
    <HeadingTemplate>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<LeaderboardUserDto, object>(x => x.Rank)" InitialDirection="SortDirection.Ascending">
                Rank
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<LeaderboardUserDto, object>(x => x.Name)">
                Name
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<LeaderboardUserDto, object>(x => x.Balance)">
                Balance
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<LeaderboardUserDto, object>(x => x.PointsToday)">
                Points Today
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<LeaderboardUserDto, object>(x => x.PointsThisWeek)">
                Points This Week
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<LeaderboardUserDto, object>(x => x.PointsThisMonth)">
                Points This Month
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<LeaderboardUserDto, object>(x => x.PointsThisYear)">
                Points This Year
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<LeaderboardUserDto, object>(x => x.PointsClaimed)">
                Points Claimed
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<LeaderboardUserDto, object>(x => x.TotalPoints)">
                Total Points
            </MudTableSortLabel>
        </MudTh>
    </HeadingTemplate>
    <RowTemplate>
        <MudTd DataLabel="Rank">@context.Rank</MudTd>
        <MudTd DataLabel="Name">
            <div class="d-flex flex-nowrap gap-2 align-center">
                <Avatar Url="@context.ProfilePic"/>
                <MudText Typo="Typo.body1">@context.Name</MudText>
            </div>
        </MudTd>
        <MudTd DataLabel="Balance">@context.Balance</MudTd>
        <MudTd DataLabel="PointsToday">@context.PointsToday</MudTd>
        <MudTd DataLabel="PointsThisWeek">@context.PointsThisWeek</MudTd>
        <MudTd DataLabel="PointsThisMonth">@context.PointsThisMonth</MudTd>
        <MudTd DataLabel="PointsThisYear">@context.PointsThisYear</MudTd>
        <MudTd DataLabel="PointsClaimed">@context.PointsClaimed</MudTd>
        <MudTd DataLabel="TotalPoints">@context.TotalPoints</MudTd>
    </RowTemplate>
</Table>

@* TODO: Move this to the code behind? *@

@code {
    private bool _loading = true;
    private string _searchString = string.Empty;
    private IEnumerable<LeaderboardUserDto> _model = Enumerable.Empty<LeaderboardUserDto>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetLeaderboard();
    }

    private async Task GetLeaderboard()
    {
        try
        {
            _loading = true;
            _model = (await _client.GetAsync()).Users;
            _loading = false;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

}