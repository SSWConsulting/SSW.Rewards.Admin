@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@inherits LayoutComponentBase

@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="AdminPortalMudTheme.Theme"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())"/>
        <MudSpacer/>
        <AuthorizeView>
            <MudText>Hello, @context.User.Identity?.Name!</MudText>
            <MudIconButton OnClick="@BeginSignOut">Log out</MudIconButton>
        </AuthorizeView>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">SSW.Rewards.Admin</MudText>
        </MudDrawerHeader>
        <NavMenu/>
    </MudDrawer>
    <MudMainContent>
        <MudContainer Fixed="true" Class="mb-16 pt-2">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code {
    private bool _isDarkMode;
    private MudThemeProvider? _mudThemeProvider;

    [CascadingParameter]
    protected Task<AuthenticationState> AuthStat { get; set; } = null!;

    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task BeginSignOut(MouseEventArgs args)
    {
        await NavigateToLogout();
        Navigation.NavigateTo("authentication/logout");
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _mudThemeProvider is not null)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }
}