@using Microsoft.AspNetCore.Components
@using SSW.Rewards.Admin.UI.Components.Dialogs.Confirmations
@using SSW.Rewards.Admin.UI.Models.Interfaces
@using MudBlazor

@inject ILeaderboardClient Client
@inject IDialogService DialogService

<MudDialog>
    <TitleContent>
        <div class="d-flex justify-center">
            <AdminQRCode Height="200" QRCodeString="@Dto.Code"/>
        </div>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="@Dto.Code" Label="Code" ReadOnly="true" Disabled="true"/>
        <MudTextField @bind-Value="@Dto.Name" Label="Name" ReadOnly="true"  Disabled="true"/>
        <MudTextField @bind-Value="@Dto.Cost" Label="Cost" AutoFocus="true" />
        <MudSelect
            @bind-Value="_selectedValue"
            T="@LeaderboardUserDto"
            Label="Assign to User"
            AnchorOrigin="Origin.TopCenter"
            TransformOrigin="Origin.BottomCenter"
            Variant="Variant.Outlined"
            AdornmentIcon="@Icons.Material.Filled.Search"
            AdornmentColor="Color.Primary">
            @foreach (var usr in _usersList.OrderBy(u => u.Name))
            {
                <MudSelectItem Value="@usr">@usr.Name</MudSelectItem>
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="Delete">Delete</MudButton>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton OnClick="AssignReward" Color="Color.Info">Redeem Reward for User</MudButton>
        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public RewardAdminViewModel Dto { get; set; } = new();

    private LeaderboardUserDto? _selectedValue;
    private IEnumerable<LeaderboardUserDto> _usersList = Enumerable.Empty<LeaderboardUserDto>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _usersList = (await Client.GetAsync()).Users;
    }
    
    void Submit() => MudDialog?.Close(DialogResult.Ok(Dto));
    void Cancel() => MudDialog?.Cancel();
    async Task Delete()
    {
        var result = await DialogService.Show<SimpleConfirmationDialog>(
            $"Delete \"{Dto.Name}?\"",
            SimpleConfirmationDialog.CreateDialogParams(
                SimpleConfirmationDialogType.Danger,
                "Deleting will prevent future users from claiming points for this reward")
            ).Result;

        if (!result.Canceled && (bool) result.Data)
        {
            MudDialog?.Close(DialogResult.Ok(Dto.Id));
        }
    }

    void AssignReward()
    {
        if (_selectedValue == null)
        {
            return;
        }

        MudDialog?.Close(DialogResult.Ok(new AssignReward
        {
            Code = Dto.Code,
            Id = _selectedValue.UserId
        }));
    }
}