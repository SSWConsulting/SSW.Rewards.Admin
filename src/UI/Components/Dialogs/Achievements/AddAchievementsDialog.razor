<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Add Achievement</MudText>    
    </TitleContent>
    <DialogContent>
        <MudForm  @ref="_form" Model="@Dto" @bind-IsValid="@_valid">
            <MudTextField Class="d-inline" T="string" Label="Achievement Name" @bind-Value="@Dto.Name" AutoFocus="true" Required="true"/>
            <MudTextField Class="d-inline" T="int" Label="Achievement Value" @bind-Value="@Dto.Value" Required="true"/>
            <MudSelect @bind-Value="@Dto.Type" Label="Achievement Type">
                @foreach (AchievementType item in Enum.GetValues(typeof(AchievementType)))
                {
                    <MudSelectItem Value="@item">@item.ToString()</MudSelectItem>
                }
            </MudSelect>
            <MudCheckBox Label="Multi-scan enabled?" @bind-Checked="@Dto.IsMultiScanEnabled"/>
        </MudForm>
    </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton 
                Variant="Variant.Filled"
                Color="Color.Primary"
                OnClick="Submit">Create</MudButton>
        </DialogActions>
</MudDialog>

@code {
    private MudForm? _form;
    private bool _valid;
    
    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }
    
    [Parameter]
    public AchievementAdminViewModel Dto { get; set; } = new();

    private async Task Submit()
    {
        if (_form is not null)
        {
            await _form.Validate();   
        }
        if (_valid)
        {
            MudDialog?.Close(DialogResult.Ok(Dto));
        }
    }
    
    private void Cancel() => MudDialog?.Cancel();
}